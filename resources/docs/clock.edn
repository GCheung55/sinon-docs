{:title "Fake timers"
 :introduction "Fake timers is a synchronous implementation of `setTimeout` and friends that
Sinon.JS can overwrite the global functions with to allow you to more easily
test code using them. Fake timers provide a `clock` object to pass time, which
can also be used to control `Date` objects created through either `new Date();`
or `Date.now();` (if supported by the browser).

When faking timers with IE you also need
[sinon-ie-${current-version}](/releases/sinon-ie-${current-version}.js), which
should be loaded after sinon-${current-version}.js.

The fake timers can be used completely stand-alone by downloading
[sinon-timers-${current-version}](/releases/sinon-timers-${current-version}.js)
When using the fake timers in IE you also need
[sinon-timers-ie-${current-version}](/releases/sinon-timers-ie-${current-version}.js).
Load it after the first file.

<pre class=\"code-snippet timers\" data-lang=\"javascript\"><code>{
    setUp: function () {
        this.clock = sinon.useFakeTimers();
    },

    tearDown: function () {
        this.clock.restore();
    },

    \"test should animate element over 500ms\" : function(){
        var el = jQuery(\"&lt;div>&lt;/div>\");
        el.appendTo(document.body);

        el.animate({ height: \"200px\", width: \"200px\" });
        this.clock.tick(510);

        assertEquals(\"200px\", el.css(\"height\"));
        assertEquals(\"200px\", el.css(\"width\"));
    }
}</code></pre>"
 :apis
 [{:id :clock-api
   :title "Fake timers API"
   :properties
   [{:name "var clock = sinon.useFakeTimers();"
     :description "Causes Sinon to replace the global `setTimeout`, `clearTimeout`,
    `setInterval`, `clearInterval` and `Date` with a custom implementation which
    is bound to the returned `clock` object."}
    {:name "var clock = sinon.useFakeTimers(now);"
     :description "As above, but rather than starting the clock at the current timestamp, start
    at the provided timestamp."}
    {:name "var clock = sinon.useFakeTimers([now, ]prop1, prop2, ...);"
     :description "Sets the clock start timestamp and names functions to fake. Possible
    functions are setTimeout, clearTimeout, setInterval, clearInterval, and
    Date. Can also be called without the timestamp."}
    {:name "clock.tick(ms);"
     :description "Tick the clock ahead `ms` milliseconds. Causes all timers scheduled within
    the affected time range to be called."}
    {:name "clock.restore();"
     :description "Restore the faked methods. Call in e.g. `tearDown`."}]}]}
